"use strict";var b=Object.defineProperty;var k=(e,n,r)=>n in e?b(e,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[n]=r;var w=(e,n,r)=>(k(e,typeof n!="symbol"?n+"":n,r),r);const obsidian=require("obsidian"),require$$0=require("fs"),__uno="";function noop(){}function run(e){return e()}function blank_object(){return Object.create(null)}function run_all(e){e.forEach(run)}function is_function(e){return typeof e=="function"}function safe_not_equal(e,n){return e!=e?n==n:e!==n||e&&typeof e=="object"||typeof e=="function"}let src_url_equal_anchor;function src_url_equal(e,n){return e===n?!0:(src_url_equal_anchor||(src_url_equal_anchor=document.createElement("a")),src_url_equal_anchor.href=n,e===src_url_equal_anchor.href)}function is_empty(e){return Object.keys(e).length===0}function null_to_empty(e){return e??""}function append(e,n){e.appendChild(n)}function insert(e,n,r){e.insertBefore(n,r||null)}function detach(e){e.parentNode&&e.parentNode.removeChild(e)}function destroy_each(e,n){for(let r=0;r<e.length;r+=1)e[r]&&e[r].d(n)}function element(e){return document.createElement(e)}function text(e){return document.createTextNode(e)}function space(){return text(" ")}function empty(){return text("")}function attr(e,n,r){r==null?e.removeAttribute(n):e.getAttribute(n)!==r&&e.setAttribute(n,r)}function children(e){return Array.from(e.childNodes)}function set_data(e,n){n=""+n,e.data!==n&&(e.data=n)}let current_component;function set_current_component(e){current_component=e}const dirty_components=[],binding_callbacks=[];let render_callbacks=[];const flush_callbacks=[],resolved_promise=Promise.resolve();let update_scheduled=!1;function schedule_update(){update_scheduled||(update_scheduled=!0,resolved_promise.then(flush))}function add_render_callback(e){render_callbacks.push(e)}const seen_callbacks=new Set;let flushidx=0;function flush(){if(flushidx!==0)return;const e=current_component;do{try{for(;flushidx<dirty_components.length;){const n=dirty_components[flushidx];flushidx++,set_current_component(n),update(n.$$)}}catch(n){throw dirty_components.length=0,flushidx=0,n}for(set_current_component(null),dirty_components.length=0,flushidx=0;binding_callbacks.length;)binding_callbacks.pop()();for(let n=0;n<render_callbacks.length;n+=1){const r=render_callbacks[n];seen_callbacks.has(r)||(seen_callbacks.add(r),r())}render_callbacks.length=0}while(dirty_components.length);for(;flush_callbacks.length;)flush_callbacks.pop()();update_scheduled=!1,seen_callbacks.clear(),set_current_component(e)}function update(e){if(e.fragment!==null){e.update(),run_all(e.before_update);const n=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,n),e.after_update.forEach(add_render_callback)}}function flush_render_callbacks(e){const n=[],r=[];render_callbacks.forEach(o=>e.indexOf(o)===-1?n.push(o):r.push(o)),r.forEach(o=>o()),render_callbacks=n}const outroing=new Set;let outros;function group_outros(){outros={r:0,c:[],p:outros}}function check_outros(){outros.r||run_all(outros.c),outros=outros.p}function transition_in(e,n){e&&e.i&&(outroing.delete(e),e.i(n))}function transition_out(e,n,r,o){if(e&&e.o){if(outroing.has(e))return;outroing.add(e),outros.c.push(()=>{outroing.delete(e),o&&(r&&e.d(1),o())}),e.o(n)}else o&&o()}function ensure_array_like(e){return(e==null?void 0:e.length)!==void 0?e:Array.from(e)}function destroy_block(e,n){e.d(1),n.delete(e.key)}function outro_and_destroy_block(e,n){transition_out(e,1,1,()=>{n.delete(e.key)})}function update_keyed_each(e,n,r,o,t,l,a,c,u,s,d,f){let p=e.length,h=l.length,m=p;const g={};for(;m--;)g[e[m].key]=m;const _=[],x=new Map,v=new Map,T=[];for(m=h;m--;){const y=f(t,l,m),E=r(y);let A=a.get(E);A?o&&T.push(()=>A.p(y,n)):(A=s(E,y),A.c()),x.set(E,_[m]=A),E in g&&v.set(E,Math.abs(m-g[E]))}const O=new Set,L=new Set;function C(y){transition_in(y,1),y.m(c,d),a.set(y.key,y),d=y.first,h--}for(;p&&h;){const y=_[h-1],E=e[p-1],A=y.key,S=E.key;y===E?(d=y.first,p--,h--):x.has(S)?!a.has(A)||O.has(A)?C(y):L.has(S)?p--:v.get(A)>v.get(S)?(L.add(A),C(y)):(O.add(S),p--):(u(E,a),p--)}for(;p--;){const y=e[p];x.has(y.key)||u(y,a)}for(;h;)C(_[h-1]);return run_all(T),_}function create_component(e){e&&e.c()}function mount_component(e,n,r){const{fragment:o,after_update:t}=e.$$;o&&o.m(n,r),add_render_callback(()=>{const l=e.$$.on_mount.map(run).filter(is_function);e.$$.on_destroy?e.$$.on_destroy.push(...l):run_all(l),e.$$.on_mount=[]}),t.forEach(add_render_callback)}function destroy_component(e,n){const r=e.$$;r.fragment!==null&&(flush_render_callbacks(r.after_update),run_all(r.on_destroy),r.fragment&&r.fragment.d(n),r.on_destroy=r.fragment=null,r.ctx=[])}function make_dirty(e,n){e.$$.dirty[0]===-1&&(dirty_components.push(e),schedule_update(),e.$$.dirty.fill(0)),e.$$.dirty[n/31|0]|=1<<n%31}function init(e,n,r,o,t,l,a=null,c=[-1]){const u=current_component;set_current_component(e);const s=e.$$={fragment:null,ctx:[],props:l,update:noop,not_equal:t,bound:blank_object(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(n.context||(u?u.$$.context:[])),callbacks:blank_object(),dirty:c,skip_bound:!1,root:n.target||u.$$.root};a&&a(s.root);let d=!1;if(s.ctx=r?r(e,n.props||{},(f,p,...h)=>{const m=h.length?h[0]:p;return s.ctx&&t(s.ctx[f],s.ctx[f]=m)&&(!s.skip_bound&&s.bound[f]&&s.bound[f](m),d&&make_dirty(e,f)),p}):[],s.update(),d=!0,run_all(s.before_update),s.fragment=o?o(s.ctx):!1,n.target){if(n.hydrate){const f=children(n.target);s.fragment&&s.fragment.l(f),f.forEach(detach)}else s.fragment&&s.fragment.c();n.intro&&transition_in(e.$$.fragment),mount_component(e,n.target,n.anchor),flush()}set_current_component(u)}class SvelteComponent{constructor(){w(this,"$$");w(this,"$$set")}$destroy(){destroy_component(this,1),this.$destroy=noop}$on(n,r){if(!is_function(r))return noop;const o=this.$$.callbacks[n]||(this.$$.callbacks[n]=[]);return o.push(r),()=>{const t=o.indexOf(r);t!==-1&&o.splice(t,1)}}$set(n){this.$$set&&!is_empty(n)&&(this.$$.skip_bound=!0,this.$$set(n),this.$$.skip_bound=!1)}}const PUBLIC_VERSION="4";typeof window<"u"&&(window.__svelte||(window.__svelte={v:new Set})).v.add(PUBLIC_VERSION);const LegacyGridImage_svelte_svelte_type_style_lang="";function create_if_block$2(e){let n,r,o;return{c(){n=element("div"),r=element("div"),o=text(e[1]),attr(r,"class","w-full rounded-md bg-white bg-opacity-75 px-4 py-2 text-center text-sm font-medium text-gray-900 backdrop-blur backdrop-filter"),attr(n,"class","absolute inset-0 flex items-end p-4 opacity-0 group-hover:opacity-100"),attr(n,"aria-hidden","true")},m(t,l){insert(t,n,l),append(n,r),append(r,o)},p(t,l){l&2&&set_data(o,t[1])},d(t){t&&detach(n)}}}function create_fragment$2(e){let n,r,o,t,l,a=e[1]&&create_if_block$2(e);return{c(){n=element("div"),r=element("img"),t=space(),a&&a.c(),attr(r,"class","w-full h-full object-cover object-center"),src_url_equal(r.src,o=e[0])||attr(r,"src",o),attr(r,"alt",e[1]),attr(n,"class",l=null_to_empty(`group relative image-layouts-image-${e[2]}`)+" svelte-1jhxzuo")},m(c,u){insert(c,n,u),append(n,r),append(n,t),a&&a.m(n,null)},p(c,[u]){u&1&&!src_url_equal(r.src,o=c[0])&&attr(r,"src",o),u&2&&attr(r,"alt",c[1]),c[1]?a?a.p(c,u):(a=create_if_block$2(c),a.c(),a.m(n,null)):a&&(a.d(1),a=null),u&4&&l!==(l=null_to_empty(`group relative image-layouts-image-${c[2]}`)+" svelte-1jhxzuo")&&attr(n,"class",l)},i:noop,o:noop,d(c){c&&detach(n),a&&a.d()}}}function instance$2(e,n,r){let{src:o}=n,{description:t}=n,{index:l}=n;return e.$$set=a=>{"src"in a&&r(0,o=a.src),"description"in a&&r(1,t=a.description),"index"in a&&r(2,l=a.index)},[o,t,l]}class LegacyGridImage extends SvelteComponent{constructor(n){super(),init(this,n,instance$2,create_fragment$2,safe_not_equal,{src:0,description:1,index:2})}}const LegacyImageLayout_svelte_svelte_type_style_lang="";function get_each_context$1(e,n,r){const o=e.slice();return o[6]=n[r],o[8]=r,o}function create_each_block$1(e,n){let r,o,t;return o=new LegacyGridImage({props:{index:n[8],src:n[6],description:n[2][n[8]]??`Image ${n[8]+1}`}}),{key:e,first:null,c(){r=empty(),create_component(o.$$.fragment),this.first=r},m(l,a){insert(l,r,a),mount_component(o,l,a),t=!0},p(l,a){n=l;const c={};a&8&&(c.index=n[8]),a&8&&(c.src=n[6]),a&12&&(c.description=n[2][n[8]]??`Image ${n[8]+1}`),o.$set(c)},i(l){t||(transition_in(o.$$.fragment,l),t=!0)},o(l){transition_out(o.$$.fragment,l),t=!1},d(l){l&&detach(r),destroy_component(o,l)}}}function create_if_block$1(e){let n,r;return{c(){n=element("div"),r=text(e[1]),attr(n,"class","text-center text-xs text-gray-800 my-2")},m(o,t){insert(o,n,t),append(n,r)},p(o,t){t&2&&set_data(r,o[1])},d(o){o&&detach(n)}}}function create_fragment$1(e){let n,r=[],o=new Map,t,l,a,c,u=ensure_array_like(e[3]);const s=f=>f[6];for(let f=0;f<u.length;f+=1){let p=get_each_context$1(e,u,f),h=s(p);o.set(h,r[f]=create_each_block$1(h,p))}let d=e[1]!==""&&create_if_block$1(e);return{c(){n=element("div");for(let f=0;f<r.length;f+=1)r[f].c();l=space(),d&&d.c(),a=empty(),attr(n,"class",t=null_to_empty(`image-layouts-grid image-layouts-layout-${e[0]} cursor-default`)+" svelte-cnjnmf")},m(f,p){insert(f,n,p);for(let h=0;h<r.length;h+=1)r[h]&&r[h].m(n,null);insert(f,l,p),d&&d.m(f,p),insert(f,a,p),c=!0},p(f,[p]){p&12&&(u=ensure_array_like(f[3]),group_outros(),r=update_keyed_each(r,p,s,1,f,u,o,n,outro_and_destroy_block,create_each_block$1,null,get_each_context$1),check_outros()),(!c||p&1&&t!==(t=null_to_empty(`image-layouts-grid image-layouts-layout-${f[0]} cursor-default`)+" svelte-cnjnmf"))&&attr(n,"class",t),f[1]!==""?d?d.p(f,p):(d=create_if_block$1(f),d.c(),d.m(a.parentNode,a)):d&&(d.d(1),d=null)},i(f){if(!c){for(let p=0;p<u.length;p+=1)transition_in(r[p]);c=!0}},o(f){for(let p=0;p<r.length;p+=1)transition_out(r[p]);c=!1},d(f){f&&(detach(n),detach(l),detach(a));for(let p=0;p<r.length;p+=1)r[p].d();d&&d.d(f)}}}function instance$1(e,n,r){let{layout:o="a"}=n,{imageUrls:t=[]}=n,{requiredImages:l=0}=n,{caption:a=""}=n,{descriptions:c=[]}=n,u=[];return t.length<l?u=[...t,...Array(l-t.length).fill("https://via.placeholder.com/640x480")]:u=t.slice(0,l),e.$$set=s=>{"layout"in s&&r(0,o=s.layout),"imageUrls"in s&&r(4,t=s.imageUrls),"requiredImages"in s&&r(5,l=s.requiredImages),"caption"in s&&r(1,a=s.caption),"descriptions"in s&&r(2,c=s.descriptions)},[o,a,c,u,t,l]}class LegacyImageLayout extends SvelteComponent{constructor(n){super(),init(this,n,instance$1,create_fragment$1,safe_not_equal,{layout:0,imageUrls:4,requiredImages:5,caption:1,descriptions:2})}}function getDefaultExportFromCjs(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var toString=Object.prototype.toString,kindOf=function(n){if(n===void 0)return"undefined";if(n===null)return"null";var r=typeof n;if(r==="boolean")return"boolean";if(r==="string")return"string";if(r==="number")return"number";if(r==="symbol")return"symbol";if(r==="function")return isGeneratorFn(n)?"generatorfunction":"function";if(isArray(n))return"array";if(isBuffer$1(n))return"buffer";if(isArguments(n))return"arguments";if(isDate(n))return"date";if(isError(n))return"error";if(isRegexp(n))return"regexp";switch(ctorName(n)){case"Symbol":return"symbol";case"Promise":return"promise";case"WeakMap":return"weakmap";case"WeakSet":return"weakset";case"Map":return"map";case"Set":return"set";case"Int8Array":return"int8array";case"Uint8Array":return"uint8array";case"Uint8ClampedArray":return"uint8clampedarray";case"Int16Array":return"int16array";case"Uint16Array":return"uint16array";case"Int32Array":return"int32array";case"Uint32Array":return"uint32array";case"Float32Array":return"float32array";case"Float64Array":return"float64array"}if(isGeneratorObj(n))return"generator";switch(r=toString.call(n),r){case"[object Object]":return"object";case"[object Map Iterator]":return"mapiterator";case"[object Set Iterator]":return"setiterator";case"[object String Iterator]":return"stringiterator";case"[object Array Iterator]":return"arrayiterator"}return r.slice(8,-1).toLowerCase().replace(/\s/g,"")};function ctorName(e){return typeof e.constructor=="function"?e.constructor.name:null}function isArray(e){return Array.isArray?Array.isArray(e):e instanceof Array}function isError(e){return e instanceof Error||typeof e.message=="string"&&e.constructor&&typeof e.constructor.stackTraceLimit=="number"}function isDate(e){return e instanceof Date?!0:typeof e.toDateString=="function"&&typeof e.getDate=="function"&&typeof e.setDate=="function"}function isRegexp(e){return e instanceof RegExp?!0:typeof e.flags=="string"&&typeof e.ignoreCase=="boolean"&&typeof e.multiline=="boolean"&&typeof e.global=="boolean"}function isGeneratorFn(e,n){return ctorName(e)==="GeneratorFunction"}function isGeneratorObj(e){return typeof e.throw=="function"&&typeof e.return=="function"&&typeof e.next=="function"}function isArguments(e){try{if(typeof e.length=="number"&&typeof e.callee=="function")return!0}catch(n){if(n.message.indexOf("callee")!==-1)return!0}return!1}function isBuffer$1(e){return e.constructor&&typeof e.constructor.isBuffer=="function"?e.constructor.isBuffer(e):!1}/*!
 * is-extendable <https://github.com/jonschlinkert/is-extendable>
 *
 * Copyright (c) 2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */var isExtendable=function(n){return typeof n<"u"&&n!==null&&(typeof n=="object"||typeof n=="function")},isObject$1=isExtendable,extendShallow=function(n){isObject$1(n)||(n={});for(var r=arguments.length,o=1;o<r;o++){var t=arguments[o];isObject$1(t)&&assign(n,t)}return n};function assign(e,n){for(var r in n)hasOwn(n,r)&&(e[r]=n[r])}function hasOwn(e,n){return Object.prototype.hasOwnProperty.call(e,n)}var typeOf$2=kindOf,extend$1=extendShallow,sectionMatter=function(e,n){typeof n=="function"&&(n={parse:n});var r=toObject(e),o={section_delimiter:"---",parse:identity},t=extend$1({},o,n),l=t.section_delimiter,a=r.content.split(/\r?\n/),c=null,u=createSection(),s=[],d=[];function f(x){r.content=x,c=[],s=[]}function p(x){d.length&&(u.key=getKey(d[0],l),u.content=x,t.parse(u,c),c.push(u),u=createSection(),s=[],d=[])}for(var h=0;h<a.length;h++){var m=a[h],g=d.length,_=m.trim();if(isDelimiter(_,l)){if(_.length===3&&h!==0){if(g===0||g===2){s.push(m);continue}d.push(_),u.data=s.join(`
`),s=[];continue}c===null&&f(s.join(`
`)),g===2&&p(s.join(`
`)),d.push(_);continue}s.push(m)}return c===null?f(s.join(`
`)):p(s.join(`
`)),r.sections=c,r};function isDelimiter(e,n){return!(e.slice(0,n.length)!==n||e.charAt(n.length+1)===n.slice(-1))}function toObject(e){if(typeOf$2(e)!=="object"&&(e={content:e}),typeof e.content!="string"&&!isBuffer(e.content))throw new TypeError("expected a buffer or string");return e.content=e.content.toString(),e.sections=[],e}function getKey(e,n){return e?e.slice(n.length).trim():""}function createSection(){return{key:"",data:"",content:""}}function identity(e){return e}function isBuffer(e){return e&&e.constructor&&typeof e.constructor.isBuffer=="function"?e.constructor.isBuffer(e):!1}var engines$2={exports:{}},jsYaml$1={},loader$1={},common$6={};function isNothing(e){return typeof e>"u"||e===null}function isObject(e){return typeof e=="object"&&e!==null}function toArray(e){return Array.isArray(e)?e:isNothing(e)?[]:[e]}function extend(e,n){var r,o,t,l;if(n)for(l=Object.keys(n),r=0,o=l.length;r<o;r+=1)t=l[r],e[t]=n[t];return e}function repeat(e,n){var r="",o;for(o=0;o<n;o+=1)r+=e;return r}function isNegativeZero(e){return e===0&&Number.NEGATIVE_INFINITY===1/e}common$6.isNothing=isNothing;common$6.isObject=isObject;common$6.toArray=toArray;common$6.repeat=repeat;common$6.isNegativeZero=isNegativeZero;common$6.extend=extend;function YAMLException$4(e,n){Error.call(this),this.name="YAMLException",this.reason=e,this.mark=n,this.message=(this.reason||"(unknown reason)")+(this.mark?" "+this.mark.toString():""),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack||""}YAMLException$4.prototype=Object.create(Error.prototype);YAMLException$4.prototype.constructor=YAMLException$4;YAMLException$4.prototype.toString=function(n){var r=this.name+": ";return r+=this.reason||"(unknown reason)",!n&&this.mark&&(r+=" "+this.mark.toString()),r};var exception=YAMLException$4,common$5=common$6;function Mark$1(e,n,r,o,t){this.name=e,this.buffer=n,this.position=r,this.line=o,this.column=t}Mark$1.prototype.getSnippet=function(n,r){var o,t,l,a,c;if(!this.buffer)return null;for(n=n||4,r=r||75,o="",t=this.position;t>0&&`\0\r
\u2028\u2029`.indexOf(this.buffer.charAt(t-1))===-1;)if(t-=1,this.position-t>r/2-1){o=" ... ",t+=5;break}for(l="",a=this.position;a<this.buffer.length&&`\0\r
\u2028\u2029`.indexOf(this.buffer.charAt(a))===-1;)if(a+=1,a-this.position>r/2-1){l=" ... ",a-=5;break}return c=this.buffer.slice(t,a),common$5.repeat(" ",n)+o+c+l+`
`+common$5.repeat(" ",n+this.position-t+o.length)+"^"};Mark$1.prototype.toString=function(n){var r,o="";return this.name&&(o+='in "'+this.name+'" '),o+="at line "+(this.line+1)+", column "+(this.column+1),n||(r=this.getSnippet(),r&&(o+=`:
`+r)),o};var mark=Mark$1,YAMLException$3=exception,TYPE_CONSTRUCTOR_OPTIONS=["kind","resolve","construct","instanceOf","predicate","represent","defaultStyle","styleAliases"],YAML_NODE_KINDS=["scalar","sequence","mapping"];function compileStyleAliases(e){var n={};return e!==null&&Object.keys(e).forEach(function(r){e[r].forEach(function(o){n[String(o)]=r})}),n}function Type$h(e,n){if(n=n||{},Object.keys(n).forEach(function(r){if(TYPE_CONSTRUCTOR_OPTIONS.indexOf(r)===-1)throw new YAMLException$3('Unknown option "'+r+'" is met in definition of "'+e+'" YAML type.')}),this.tag=e,this.kind=n.kind||null,this.resolve=n.resolve||function(){return!0},this.construct=n.construct||function(r){return r},this.instanceOf=n.instanceOf||null,this.predicate=n.predicate||null,this.represent=n.represent||null,this.defaultStyle=n.defaultStyle||null,this.styleAliases=compileStyleAliases(n.styleAliases||null),YAML_NODE_KINDS.indexOf(this.kind)===-1)throw new YAMLException$3('Unknown kind "'+this.kind+'" is specified for "'+e+'" YAML type.')}var type=Type$h,common$4=common$6,YAMLException$2=exception,Type$g=type;function compileList(e,n,r){var o=[];return e.include.forEach(function(t){r=compileList(t,n,r)}),e[n].forEach(function(t){r.forEach(function(l,a){l.tag===t.tag&&l.kind===t.kind&&o.push(a)}),r.push(t)}),r.filter(function(t,l){return o.indexOf(l)===-1})}function compileMap(){var e={scalar:{},sequence:{},mapping:{},fallback:{}},n,r;function o(t){e[t.kind][t.tag]=e.fallback[t.tag]=t}for(n=0,r=arguments.length;n<r;n+=1)arguments[n].forEach(o);return e}function Schema$5(e){this.include=e.include||[],this.implicit=e.implicit||[],this.explicit=e.explicit||[],this.implicit.forEach(function(n){if(n.loadKind&&n.loadKind!=="scalar")throw new YAMLException$2("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.")}),this.compiledImplicit=compileList(this,"implicit",[]),this.compiledExplicit=compileList(this,"explicit",[]),this.compiledTypeMap=compileMap(this.compiledImplicit,this.compiledExplicit)}Schema$5.DEFAULT=null;Schema$5.create=function(){var n,r;switch(arguments.length){case 1:n=Schema$5.DEFAULT,r=arguments[0];break;case 2:n=arguments[0],r=arguments[1];break;default:throw new YAMLException$2("Wrong number of arguments for Schema.create function")}if(n=common$4.toArray(n),r=common$4.toArray(r),!n.every(function(o){return o instanceof Schema$5}))throw new YAMLException$2("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");if(!r.every(function(o){return o instanceof Type$g}))throw new YAMLException$2("Specified list of YAML types (or a single Type object) contains a non-Type object.");return new Schema$5({include:n,explicit:r})};var schema=Schema$5,Type$f=type,str=new Type$f("tag:yaml.org,2002:str",{kind:"scalar",construct:function(e){return e!==null?e:""}}),Type$e=type,seq=new Type$e("tag:yaml.org,2002:seq",{kind:"sequence",construct:function(e){return e!==null?e:[]}}),Type$d=type,map=new Type$d("tag:yaml.org,2002:map",{kind:"mapping",construct:function(e){return e!==null?e:{}}}),Schema$4=schema,failsafe=new Schema$4({explicit:[str,seq,map]}),Type$c=type;function resolveYamlNull(e){if(e===null)return!0;var n=e.length;return n===1&&e==="~"||n===4&&(e==="null"||e==="Null"||e==="NULL")}function constructYamlNull(){return null}function isNull(e){return e===null}var _null=new Type$c("tag:yaml.org,2002:null",{kind:"scalar",resolve:resolveYamlNull,construct:constructYamlNull,predicate:isNull,represent:{canonical:function(){return"~"},lowercase:function(){return"null"},uppercase:function(){return"NULL"},camelcase:function(){return"Null"}},defaultStyle:"lowercase"}),Type$b=type;function resolveYamlBoolean(e){if(e===null)return!1;var n=e.length;return n===4&&(e==="true"||e==="True"||e==="TRUE")||n===5&&(e==="false"||e==="False"||e==="FALSE")}function constructYamlBoolean(e){return e==="true"||e==="True"||e==="TRUE"}function isBoolean(e){return Object.prototype.toString.call(e)==="[object Boolean]"}var bool=new Type$b("tag:yaml.org,2002:bool",{kind:"scalar",resolve:resolveYamlBoolean,construct:constructYamlBoolean,predicate:isBoolean,represent:{lowercase:function(e){return e?"true":"false"},uppercase:function(e){return e?"TRUE":"FALSE"},camelcase:function(e){return e?"True":"False"}},defaultStyle:"lowercase"}),common$3=common$6,Type$a=type;function isHexCode(e){return 48<=e&&e<=57||65<=e&&e<=70||97<=e&&e<=102}function isOctCode(e){return 48<=e&&e<=55}function isDecCode(e){return 48<=e&&e<=57}function resolveYamlInteger(e){if(e===null)return!1;var n=e.length,r=0,o=!1,t;if(!n)return!1;if(t=e[r],(t==="-"||t==="+")&&(t=e[++r]),t==="0"){if(r+1===n)return!0;if(t=e[++r],t==="b"){for(r++;r<n;r++)if(t=e[r],t!=="_"){if(t!=="0"&&t!=="1")return!1;o=!0}return o&&t!=="_"}if(t==="x"){for(r++;r<n;r++)if(t=e[r],t!=="_"){if(!isHexCode(e.charCodeAt(r)))return!1;o=!0}return o&&t!=="_"}for(;r<n;r++)if(t=e[r],t!=="_"){if(!isOctCode(e.charCodeAt(r)))return!1;o=!0}return o&&t!=="_"}if(t==="_")return!1;for(;r<n;r++)if(t=e[r],t!=="_"){if(t===":")break;if(!isDecCode(e.charCodeAt(r)))return!1;o=!0}return!o||t==="_"?!1:t!==":"?!0:/^(:[0-5]?[0-9])+$/.test(e.slice(r))}function constructYamlInteger(e){var n=e,r=1,o,t,l=[];return n.indexOf("_")!==-1&&(n=n.replace(/_/g,"")),o=n[0],(o==="-"||o==="+")&&(o==="-"&&(r=-1),n=n.slice(1),o=n[0]),n==="0"?0:o==="0"?n[1]==="b"?r*parseInt(n.slice(2),2):n[1]==="x"?r*parseInt(n,16):r*parseInt(n,8):n.indexOf(":")!==-1?(n.split(":").forEach(function(a){l.unshift(parseInt(a,10))}),n=0,t=1,l.forEach(function(a){n+=a*t,t*=60}),r*n):r*parseInt(n,10)}function isInteger(e){return Object.prototype.toString.call(e)==="[object Number]"&&e%1===0&&!common$3.isNegativeZero(e)}var int=new Type$a("tag:yaml.org,2002:int",{kind:"scalar",resolve:resolveYamlInteger,construct:constructYamlInteger,predicate:isInteger,represent:{binary:function(e){return e>=0?"0b"+e.toString(2):"-0b"+e.toString(2).slice(1)},octal:function(e){return e>=0?"0"+e.toString(8):"-0"+e.toString(8).slice(1)},decimal:function(e){return e.toString(10)},hexadecimal:function(e){return e>=0?"0x"+e.toString(16).toUpperCase():"-0x"+e.toString(16).toUpperCase().slice(1)}},defaultStyle:"decimal",styleAliases:{binary:[2,"bin"],octal:[8,"oct"],decimal:[10,"dec"],hexadecimal:[16,"hex"]}}),common$2=common$6,Type$9=type,YAML_FLOAT_PATTERN=new RegExp("^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");function resolveYamlFloat(e){return!(e===null||!YAML_FLOAT_PATTERN.test(e)||e[e.length-1]==="_")}function constructYamlFloat(e){var n,r,o,t;return n=e.replace(/_/g,"").toLowerCase(),r=n[0]==="-"?-1:1,t=[],"+-".indexOf(n[0])>=0&&(n=n.slice(1)),n===".inf"?r===1?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:n===".nan"?NaN:n.indexOf(":")>=0?(n.split(":").forEach(function(l){t.unshift(parseFloat(l,10))}),n=0,o=1,t.forEach(function(l){n+=l*o,o*=60}),r*n):r*parseFloat(n,10)}var SCIENTIFIC_WITHOUT_DOT=/^[-+]?[0-9]+e/;function representYamlFloat(e,n){var r;if(isNaN(e))switch(n){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}else if(Number.POSITIVE_INFINITY===e)switch(n){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}else if(Number.NEGATIVE_INFINITY===e)switch(n){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}else if(common$2.isNegativeZero(e))return"-0.0";return r=e.toString(10),SCIENTIFIC_WITHOUT_DOT.test(r)?r.replace("e",".e"):r}function isFloat(e){return Object.prototype.toString.call(e)==="[object Number]"&&(e%1!==0||common$2.isNegativeZero(e))}var float=new Type$9("tag:yaml.org,2002:float",{kind:"scalar",resolve:resolveYamlFloat,construct:constructYamlFloat,predicate:isFloat,represent:representYamlFloat,defaultStyle:"lowercase"}),Schema$3=schema,json=new Schema$3({include:[failsafe],implicit:[_null,bool,int,float]}),Schema$2=schema,core=new Schema$2({include:[json]}),Type$8=type,YAML_DATE_REGEXP=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"),YAML_TIMESTAMP_REGEXP=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");function resolveYamlTimestamp(e){return e===null?!1:YAML_DATE_REGEXP.exec(e)!==null||YAML_TIMESTAMP_REGEXP.exec(e)!==null}function constructYamlTimestamp(e){var n,r,o,t,l,a,c,u=0,s=null,d,f,p;if(n=YAML_DATE_REGEXP.exec(e),n===null&&(n=YAML_TIMESTAMP_REGEXP.exec(e)),n===null)throw new Error("Date resolve error");if(r=+n[1],o=+n[2]-1,t=+n[3],!n[4])return new Date(Date.UTC(r,o,t));if(l=+n[4],a=+n[5],c=+n[6],n[7]){for(u=n[7].slice(0,3);u.length<3;)u+="0";u=+u}return n[9]&&(d=+n[10],f=+(n[11]||0),s=(d*60+f)*6e4,n[9]==="-"&&(s=-s)),p=new Date(Date.UTC(r,o,t,l,a,c,u)),s&&p.setTime(p.getTime()-s),p}function representYamlTimestamp(e){return e.toISOString()}var timestamp=new Type$8("tag:yaml.org,2002:timestamp",{kind:"scalar",resolve:resolveYamlTimestamp,construct:constructYamlTimestamp,instanceOf:Date,represent:representYamlTimestamp}),Type$7=type;function resolveYamlMerge(e){return e==="<<"||e===null}var merge=new Type$7("tag:yaml.org,2002:merge",{kind:"scalar",resolve:resolveYamlMerge});function commonjsRequire(e){throw new Error('Could not dynamically require "'+e+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var NodeBuffer;try{var _require$1=commonjsRequire;NodeBuffer=_require$1("buffer").Buffer}catch{}var Type$6=type,BASE64_MAP=`ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=
\r`;function resolveYamlBinary(e){if(e===null)return!1;var n,r,o=0,t=e.length,l=BASE64_MAP;for(r=0;r<t;r++)if(n=l.indexOf(e.charAt(r)),!(n>64)){if(n<0)return!1;o+=6}return o%8===0}function constructYamlBinary(e){var n,r,o=e.replace(/[\r\n=]/g,""),t=o.length,l=BASE64_MAP,a=0,c=[];for(n=0;n<t;n++)n%4===0&&n&&(c.push(a>>16&255),c.push(a>>8&255),c.push(a&255)),a=a<<6|l.indexOf(o.charAt(n));return r=t%4*6,r===0?(c.push(a>>16&255),c.push(a>>8&255),c.push(a&255)):r===18?(c.push(a>>10&255),c.push(a>>2&255)):r===12&&c.push(a>>4&255),NodeBuffer?NodeBuffer.from?NodeBuffer.from(c):new NodeBuffer(c):c}function representYamlBinary(e){var n="",r=0,o,t,l=e.length,a=BASE64_MAP;for(o=0;o<l;o++)o%3===0&&o&&(n+=a[r>>18&63],n+=a[r>>12&63],n+=a[r>>6&63],n+=a[r&63]),r=(r<<8)+e[o];return t=l%3,t===0?(n+=a[r>>18&63],n+=a[r>>12&63],n+=a[r>>6&63],n+=a[r&63]):t===2?(n+=a[r>>10&63],n+=a[r>>4&63],n+=a[r<<2&63],n+=a[64]):t===1&&(n+=a[r>>2&63],n+=a[r<<4&63],n+=a[64],n+=a[64]),n}function isBinary(e){return NodeBuffer&&NodeBuffer.isBuffer(e)}var binary=new Type$6("tag:yaml.org,2002:binary",{kind:"scalar",resolve:resolveYamlBinary,construct:constructYamlBinary,predicate:isBinary,represent:representYamlBinary}),Type$5=type,_hasOwnProperty$3=Object.prototype.hasOwnProperty,_toString$2=Object.prototype.toString;function resolveYamlOmap(e){if(e===null)return!0;var n=[],r,o,t,l,a,c=e;for(r=0,o=c.length;r<o;r+=1){if(t=c[r],a=!1,_toString$2.call(t)!=="[object Object]")return!1;for(l in t)if(_hasOwnProperty$3.call(t,l))if(!a)a=!0;else return!1;if(!a)return!1;if(n.indexOf(l)===-1)n.push(l);else return!1}return!0}function constructYamlOmap(e){return e!==null?e:[]}var omap=new Type$5("tag:yaml.org,2002:omap",{kind:"sequence",resolve:resolveYamlOmap,construct:constructYamlOmap}),Type$4=type,_toString$1=Object.prototype.toString;function resolveYamlPairs(e){if(e===null)return!0;var n,r,o,t,l,a=e;for(l=new Array(a.length),n=0,r=a.length;n<r;n+=1){if(o=a[n],_toString$1.call(o)!=="[object Object]"||(t=Object.keys(o),t.length!==1))return!1;l[n]=[t[0],o[t[0]]]}return!0}function constructYamlPairs(e){if(e===null)return[];var n,r,o,t,l,a=e;for(l=new Array(a.length),n=0,r=a.length;n<r;n+=1)o=a[n],t=Object.keys(o),l[n]=[t[0],o[t[0]]];return l}var pairs=new Type$4("tag:yaml.org,2002:pairs",{kind:"sequence",resolve:resolveYamlPairs,construct:constructYamlPairs}),Type$3=type,_hasOwnProperty$2=Object.prototype.hasOwnProperty;function resolveYamlSet(e){if(e===null)return!0;var n,r=e;for(n in r)if(_hasOwnProperty$2.call(r,n)&&r[n]!==null)return!1;return!0}function constructYamlSet(e){return e!==null?e:{}}var set=new Type$3("tag:yaml.org,2002:set",{kind:"mapping",resolve:resolveYamlSet,construct:constructYamlSet}),Schema$1=schema,default_safe=new Schema$1({include:[core],implicit:[timestamp,merge],explicit:[binary,omap,pairs,set]}),Type$2=type;function resolveJavascriptUndefined(){return!0}function constructJavascriptUndefined(){}function representJavascriptUndefined(){return""}function isUndefined(e){return typeof e>"u"}var _undefined=new Type$2("tag:yaml.org,2002:js/undefined",{kind:"scalar",resolve:resolveJavascriptUndefined,construct:constructJavascriptUndefined,predicate:isUndefined,represent:representJavascriptUndefined}),Type$1=type;function resolveJavascriptRegExp(e){if(e===null||e.length===0)return!1;var n=e,r=/\/([gim]*)$/.exec(e),o="";return!(n[0]==="/"&&(r&&(o=r[1]),o.length>3||n[n.length-o.length-1]!=="/"))}function constructJavascriptRegExp(e){var n=e,r=/\/([gim]*)$/.exec(e),o="";return n[0]==="/"&&(r&&(o=r[1]),n=n.slice(1,n.length-o.length-1)),new RegExp(n,o)}function representJavascriptRegExp(e){var n="/"+e.source+"/";return e.global&&(n+="g"),e.multiline&&(n+="m"),e.ignoreCase&&(n+="i"),n}function isRegExp(e){return Object.prototype.toString.call(e)==="[object RegExp]"}var regexp=new Type$1("tag:yaml.org,2002:js/regexp",{kind:"scalar",resolve:resolveJavascriptRegExp,construct:constructJavascriptRegExp,predicate:isRegExp,represent:representJavascriptRegExp}),esprima;try{var _require=commonjsRequire;esprima=_require("esprima")}catch{typeof window<"u"&&(esprima=window.esprima)}var Type=type;function resolveJavascriptFunction(e){if(e===null)return!1;try{var n="("+e+")",r=esprima.parse(n,{range:!0});return!(r.type!=="Program"||r.body.length!==1||r.body[0].type!=="ExpressionStatement"||r.body[0].expression.type!=="ArrowFunctionExpression"&&r.body[0].expression.type!=="FunctionExpression")}catch{return!1}}function constructJavascriptFunction(e){var n="("+e+")",r=esprima.parse(n,{range:!0}),o=[],t;if(r.type!=="Program"||r.body.length!==1||r.body[0].type!=="ExpressionStatement"||r.body[0].expression.type!=="ArrowFunctionExpression"&&r.body[0].expression.type!=="FunctionExpression")throw new Error("Failed to resolve function");return r.body[0].expression.params.forEach(function(l){o.push(l.name)}),t=r.body[0].expression.body.range,r.body[0].expression.body.type==="BlockStatement"?new Function(o,n.slice(t[0]+1,t[1]-1)):new Function(o,"return "+n.slice(t[0],t[1]))}function representJavascriptFunction(e){return e.toString()}function isFunction(e){return Object.prototype.toString.call(e)==="[object Function]"}var _function=new Type("tag:yaml.org,2002:js/function",{kind:"scalar",resolve:resolveJavascriptFunction,construct:constructJavascriptFunction,predicate:isFunction,represent:representJavascriptFunction}),Schema=schema,default_full=Schema.DEFAULT=new Schema({include:[default_safe],explicit:[_undefined,regexp,_function]}),common$1=common$6,YAMLException$1=exception,Mark=mark,DEFAULT_SAFE_SCHEMA$1=default_safe,DEFAULT_FULL_SCHEMA$1=default_full,_hasOwnProperty$1=Object.prototype.hasOwnProperty,CONTEXT_FLOW_IN=1,CONTEXT_FLOW_OUT=2,CONTEXT_BLOCK_IN=3,CONTEXT_BLOCK_OUT=4,CHOMPING_CLIP=1,CHOMPING_STRIP=2,CHOMPING_KEEP=3,PATTERN_NON_PRINTABLE=/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,PATTERN_NON_ASCII_LINE_BREAKS=/[\x85\u2028\u2029]/,PATTERN_FLOW_INDICATORS=/[,\[\]\{\}]/,PATTERN_TAG_HANDLE=/^(?:!|!!|![a-z\-]+!)$/i,PATTERN_TAG_URI=/^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;function _class(e){return Object.prototype.toString.call(e)}function is_EOL(e){return e===10||e===13}function is_WHITE_SPACE(e){return e===9||e===32}function is_WS_OR_EOL(e){return e===9||e===32||e===10||e===13}function is_FLOW_INDICATOR(e){return e===44||e===91||e===93||e===123||e===125}function fromHexCode(e){var n;return 48<=e&&e<=57?e-48:(n=e|32,97<=n&&n<=102?n-97+10:-1)}function escapedHexLen(e){return e===120?2:e===117?4:e===85?8:0}function fromDecimalCode(e){return 48<=e&&e<=57?e-48:-1}function simpleEscapeSequence(e){return e===48?"\0":e===97?"\x07":e===98?"\b":e===116||e===9?"	":e===110?`
`:e===118?"\v":e===102?"\f":e===114?"\r":e===101?"\x1B":e===32?" ":e===34?'"':e===47?"/":e===92?"\\":e===78?"":e===95?" ":e===76?"\u2028":e===80?"\u2029":""}function charFromCodepoint(e){return e<=65535?String.fromCharCode(e):String.fromCharCode((e-65536>>10)+55296,(e-65536&1023)+56320)}var simpleEscapeCheck=new Array(256),simpleEscapeMap=new Array(256);for(var i=0;i<256;i++)simpleEscapeCheck[i]=simpleEscapeSequence(i)?1:0,simpleEscapeMap[i]=simpleEscapeSequence(i);function State$1(e,n){this.input=e,this.filename=n.filename||null,this.schema=n.schema||DEFAULT_FULL_SCHEMA$1,this.onWarning=n.onWarning||null,this.legacy=n.legacy||!1,this.json=n.json||!1,this.listener=n.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=e.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.documents=[]}function generateError(e,n){return new YAMLException$1(n,new Mark(e.filename,e.input,e.position,e.line,e.position-e.lineStart))}function throwError(e,n){throw generateError(e,n)}function throwWarning(e,n){e.onWarning&&e.onWarning.call(null,generateError(e,n))}var directiveHandlers={YAML:function(n,r,o){var t,l,a;n.version!==null&&throwError(n,"duplication of %YAML directive"),o.length!==1&&throwError(n,"YAML directive accepts exactly one argument"),t=/^([0-9]+)\.([0-9]+)$/.exec(o[0]),t===null&&throwError(n,"ill-formed argument of the YAML directive"),l=parseInt(t[1],10),a=parseInt(t[2],10),l!==1&&throwError(n,"unacceptable YAML version of the document"),n.version=o[0],n.checkLineBreaks=a<2,a!==1&&a!==2&&throwWarning(n,"unsupported YAML version of the document")},TAG:function(n,r,o){var t,l;o.length!==2&&throwError(n,"TAG directive accepts exactly two arguments"),t=o[0],l=o[1],PATTERN_TAG_HANDLE.test(t)||throwError(n,"ill-formed tag handle (first argument) of the TAG directive"),_hasOwnProperty$1.call(n.tagMap,t)&&throwError(n,'there is a previously declared suffix for "'+t+'" tag handle'),PATTERN_TAG_URI.test(l)||throwError(n,"ill-formed tag prefix (second argument) of the TAG directive"),n.tagMap[t]=l}};function captureSegment(e,n,r,o){var t,l,a,c;if(n<r){if(c=e.input.slice(n,r),o)for(t=0,l=c.length;t<l;t+=1)a=c.charCodeAt(t),a===9||32<=a&&a<=1114111||throwError(e,"expected valid JSON character");else PATTERN_NON_PRINTABLE.test(c)&&throwError(e,"the stream contains non-printable characters");e.result+=c}}function mergeMappings(e,n,r,o){var t,l,a,c;for(common$1.isObject(r)||throwError(e,"cannot merge mappings; the provided source object is unacceptable"),t=Object.keys(r),a=0,c=t.length;a<c;a+=1)l=t[a],_hasOwnProperty$1.call(n,l)||(n[l]=r[l],o[l]=!0)}function storeMappingPair(e,n,r,o,t,l,a,c){var u,s;if(Array.isArray(t))for(t=Array.prototype.slice.call(t),u=0,s=t.length;u<s;u+=1)Array.isArray(t[u])&&throwError(e,"nested arrays are not supported inside keys"),typeof t=="object"&&_class(t[u])==="[object Object]"&&(t[u]="[object Object]");if(typeof t=="object"&&_class(t)==="[object Object]"&&(t="[object Object]"),t=String(t),n===null&&(n={}),o==="tag:yaml.org,2002:merge")if(Array.isArray(l))for(u=0,s=l.length;u<s;u+=1)mergeMappings(e,n,l[u],r);else mergeMappings(e,n,l,r);else!e.json&&!_hasOwnProperty$1.call(r,t)&&_hasOwnProperty$1.call(n,t)&&(e.line=a||e.line,e.position=c||e.position,throwError(e,"duplicated mapping key")),n[t]=l,delete r[t];return n}function readLineBreak(e){var n;n=e.input.charCodeAt(e.position),n===10?e.position++:n===13?(e.position++,e.input.charCodeAt(e.position)===10&&e.position++):throwError(e,"a line break is expected"),e.line+=1,e.lineStart=e.position}function skipSeparationSpace(e,n,r){for(var o=0,t=e.input.charCodeAt(e.position);t!==0;){for(;is_WHITE_SPACE(t);)t=e.input.charCodeAt(++e.position);if(n&&t===35)do t=e.input.charCodeAt(++e.position);while(t!==10&&t!==13&&t!==0);if(is_EOL(t))for(readLineBreak(e),t=e.input.charCodeAt(e.position),o++,e.lineIndent=0;t===32;)e.lineIndent++,t=e.input.charCodeAt(++e.position);else break}return r!==-1&&o!==0&&e.lineIndent<r&&throwWarning(e,"deficient indentation"),o}function testDocumentSeparator(e){var n=e.position,r;return r=e.input.charCodeAt(n),!!((r===45||r===46)&&r===e.input.charCodeAt(n+1)&&r===e.input.charCodeAt(n+2)&&(n+=3,r=e.input.charCodeAt(n),r===0||is_WS_OR_EOL(r)))}function writeFoldedLines(e,n){n===1?e.result+=" ":n>1&&(e.result+=common$1.repeat(`
`,n-1))}function readPlainScalar(e,n,r){var o,t,l,a,c,u,s,d,f=e.kind,p=e.result,h;if(h=e.input.charCodeAt(e.position),is_WS_OR_EOL(h)||is_FLOW_INDICATOR(h)||h===35||h===38||h===42||h===33||h===124||h===62||h===39||h===34||h===37||h===64||h===96||(h===63||h===45)&&(t=e.input.charCodeAt(e.position+1),is_WS_OR_EOL(t)||r&&is_FLOW_INDICATOR(t)))return!1;for(e.kind="scalar",e.result="",l=a=e.position,c=!1;h!==0;){if(h===58){if(t=e.input.charCodeAt(e.position+1),is_WS_OR_EOL(t)||r&&is_FLOW_INDICATOR(t))break}else if(h===35){if(o=e.input.charCodeAt(e.position-1),is_WS_OR_EOL(o))break}else{if(e.position===e.lineStart&&testDocumentSeparator(e)||r&&is_FLOW_INDICATOR(h))break;if(is_EOL(h))if(u=e.line,s=e.lineStart,d=e.lineIndent,skipSeparationSpace(e,!1,-1),e.lineIndent>=n){c=!0,h=e.input.charCodeAt(e.position);continue}else{e.position=a,e.line=u,e.lineStart=s,e.lineIndent=d;break}}c&&(captureSegment(e,l,a,!1),writeFoldedLines(e,e.line-u),l=a=e.position,c=!1),is_WHITE_SPACE(h)||(a=e.position+1),h=e.input.charCodeAt(++e.position)}return captureSegment(e,l,a,!1),e.result?!0:(e.kind=f,e.result=p,!1)}function readSingleQuotedScalar(e,n){var r,o,t;if(r=e.input.charCodeAt(e.position),r!==39)return!1;for(e.kind="scalar",e.result="",e.position++,o=t=e.position;(r=e.input.charCodeAt(e.position))!==0;)if(r===39)if(captureSegment(e,o,e.position,!0),r=e.input.charCodeAt(++e.position),r===39)o=e.position,e.position++,t=e.position;else return!0;else is_EOL(r)?(captureSegment(e,o,t,!0),writeFoldedLines(e,skipSeparationSpace(e,!1,n)),o=t=e.position):e.position===e.lineStart&&testDocumentSeparator(e)?throwError(e,"unexpected end of the document within a single quoted scalar"):(e.position++,t=e.position);throwError(e,"unexpected end of the stream within a single quoted scalar")}function readDoubleQuotedScalar(e,n){var r,o,t,l,a,c;if(c=e.input.charCodeAt(e.position),c!==34)return!1;for(e.kind="scalar",e.result="",e.position++,r=o=e.position;(c=e.input.charCodeAt(e.position))!==0;){if(c===34)return captureSegment(e,r,e.position,!0),e.position++,!0;if(c===92){if(captureSegment(e,r,e.position,!0),c=e.input.charCodeAt(++e.position),is_EOL(c))skipSeparationSpace(e,!1,n);else if(c<256&&simpleEscapeCheck[c])e.result+=simpleEscapeMap[c],e.position++;else if((a=escapedHexLen(c))>0){for(t=a,l=0;t>0;t--)c=e.input.charCodeAt(++e.position),(a=fromHexCode(c))>=0?l=(l<<4)+a:throwError(e,"expected hexadecimal character");e.result+=charFromCodepoint(l),e.position++}else throwError(e,"unknown escape sequence");r=o=e.position}else is_EOL(c)?(captureSegment(e,r,o,!0),writeFoldedLines(e,skipSeparationSpace(e,!1,n)),r=o=e.position):e.position===e.lineStart&&testDocumentSeparator(e)?throwError(e,"unexpected end of the document within a double quoted scalar"):(e.position++,o=e.position)}throwError(e,"unexpected end of the stream within a double quoted scalar")}function readFlowCollection(e,n){var r=!0,o,t=e.tag,l,a=e.anchor,c,u,s,d,f,p={},h,m,g,_;if(_=e.input.charCodeAt(e.position),_===91)u=93,f=!1,l=[];else if(_===123)u=125,f=!0,l={};else return!1;for(e.anchor!==null&&(e.anchorMap[e.anchor]=l),_=e.input.charCodeAt(++e.position);_!==0;){if(skipSeparationSpace(e,!0,n),_=e.input.charCodeAt(e.position),_===u)return e.position++,e.tag=t,e.anchor=a,e.kind=f?"mapping":"sequence",e.result=l,!0;r||throwError(e,"missed comma between flow collection entries"),m=h=g=null,s=d=!1,_===63&&(c=e.input.charCodeAt(e.position+1),is_WS_OR_EOL(c)&&(s=d=!0,e.position++,skipSeparationSpace(e,!0,n))),o=e.line,composeNode(e,n,CONTEXT_FLOW_IN,!1,!0),m=e.tag,h=e.result,skipSeparationSpace(e,!0,n),_=e.input.charCodeAt(e.position),(d||e.line===o)&&_===58&&(s=!0,_=e.input.charCodeAt(++e.position),skipSeparationSpace(e,!0,n),composeNode(e,n,CONTEXT_FLOW_IN,!1,!0),g=e.result),f?storeMappingPair(e,l,p,m,h,g):s?l.push(storeMappingPair(e,null,p,m,h,g)):l.push(h),skipSeparationSpace(e,!0,n),_=e.input.charCodeAt(e.position),_===44?(r=!0,_=e.input.charCodeAt(++e.position)):r=!1}throwError(e,"unexpected end of the stream within a flow collection")}function readBlockScalar(e,n){var r,o,t=CHOMPING_CLIP,l=!1,a=!1,c=n,u=0,s=!1,d,f;if(f=e.input.charCodeAt(e.position),f===124)o=!1;else if(f===62)o=!0;else return!1;for(e.kind="scalar",e.result="";f!==0;)if(f=e.input.charCodeAt(++e.position),f===43||f===45)CHOMPING_CLIP===t?t=f===43?CHOMPING_KEEP:CHOMPING_STRIP:throwError(e,"repeat of a chomping mode identifier");else if((d=fromDecimalCode(f))>=0)d===0?throwError(e,"bad explicit indentation width of a block scalar; it cannot be less than one"):a?throwError(e,"repeat of an indentation width identifier"):(c=n+d-1,a=!0);else break;if(is_WHITE_SPACE(f)){do f=e.input.charCodeAt(++e.position);while(is_WHITE_SPACE(f));if(f===35)do f=e.input.charCodeAt(++e.position);while(!is_EOL(f)&&f!==0)}for(;f!==0;){for(readLineBreak(e),e.lineIndent=0,f=e.input.charCodeAt(e.position);(!a||e.lineIndent<c)&&f===32;)e.lineIndent++,f=e.input.charCodeAt(++e.position);if(!a&&e.lineIndent>c&&(c=e.lineIndent),is_EOL(f)){u++;continue}if(e.lineIndent<c){t===CHOMPING_KEEP?e.result+=common$1.repeat(`
`,l?1+u:u):t===CHOMPING_CLIP&&l&&(e.result+=`
`);break}for(o?is_WHITE_SPACE(f)?(s=!0,e.result+=common$1.repeat(`
`,l?1+u:u)):s?(s=!1,e.result+=common$1.repeat(`
`,u+1)):u===0?l&&(e.result+=" "):e.result+=common$1.repeat(`
`,u):e.result+=common$1.repeat(`
`,l?1+u:u),l=!0,a=!0,u=0,r=e.position;!is_EOL(f)&&f!==0;)f=e.input.charCodeAt(++e.position);captureSegment(e,r,e.position,!1)}return!0}function readBlockSequence(e,n){var r,o=e.tag,t=e.anchor,l=[],a,c=!1,u;for(e.anchor!==null&&(e.anchorMap[e.anchor]=l),u=e.input.charCodeAt(e.position);u!==0&&!(u!==45||(a=e.input.charCodeAt(e.position+1),!is_WS_OR_EOL(a)));){if(c=!0,e.position++,skipSeparationSpace(e,!0,-1)&&e.lineIndent<=n){l.push(null),u=e.input.charCodeAt(e.position);continue}if(r=e.line,composeNode(e,n,CONTEXT_BLOCK_IN,!1,!0),l.push(e.result),skipSeparationSpace(e,!0,-1),u=e.input.charCodeAt(e.position),(e.line===r||e.lineIndent>n)&&u!==0)throwError(e,"bad indentation of a sequence entry");else if(e.lineIndent<n)break}return c?(e.tag=o,e.anchor=t,e.kind="sequence",e.result=l,!0):!1}function readBlockMapping(e,n,r){var o,t,l,a,c=e.tag,u=e.anchor,s={},d={},f=null,p=null,h=null,m=!1,g=!1,_;for(e.anchor!==null&&(e.anchorMap[e.anchor]=s),_=e.input.charCodeAt(e.position);_!==0;){if(o=e.input.charCodeAt(e.position+1),l=e.line,a=e.position,(_===63||_===58)&&is_WS_OR_EOL(o))_===63?(m&&(storeMappingPair(e,s,d,f,p,null),f=p=h=null),g=!0,m=!0,t=!0):m?(m=!1,t=!0):throwError(e,"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"),e.position+=1,_=o;else if(composeNode(e,r,CONTEXT_FLOW_OUT,!1,!0))if(e.line===l){for(_=e.input.charCodeAt(e.position);is_WHITE_SPACE(_);)_=e.input.charCodeAt(++e.position);if(_===58)_=e.input.charCodeAt(++e.position),is_WS_OR_EOL(_)||throwError(e,"a whitespace character is expected after the key-value separator within a block mapping"),m&&(storeMappingPair(e,s,d,f,p,null),f=p=h=null),g=!0,m=!1,t=!1,f=e.tag,p=e.result;else if(g)throwError(e,"can not read an implicit mapping pair; a colon is missed");else return e.tag=c,e.anchor=u,!0}else if(g)throwError(e,"can not read a block mapping entry; a multiline key may not be an implicit key");else return e.tag=c,e.anchor=u,!0;else break;if((e.line===l||e.lineIndent>n)&&(composeNode(e,n,CONTEXT_BLOCK_OUT,!0,t)&&(m?p=e.result:h=e.result),m||(storeMappingPair(e,s,d,f,p,h,l,a),f=p=h=null),skipSeparationSpace(e,!0,-1),_=e.input.charCodeAt(e.position)),e.lineIndent>n&&_!==0)throwError(e,"bad indentation of a mapping entry");else if(e.lineIndent<n)break}return m&&storeMappingPair(e,s,d,f,p,null),g&&(e.tag=c,e.anchor=u,e.kind="mapping",e.result=s),g}function readTagProperty(e){var n,r=!1,o=!1,t,l,a;if(a=e.input.charCodeAt(e.position),a!==33)return!1;if(e.tag!==null&&throwError(e,"duplication of a tag property"),a=e.input.charCodeAt(++e.position),a===60?(r=!0,a=e.input.charCodeAt(++e.position)):a===33?(o=!0,t="!!",a=e.input.charCodeAt(++e.position)):t="!",n=e.position,r){do a=e.input.charCodeAt(++e.position);while(a!==0&&a!==62);e.position<e.length?(l=e.input.slice(n,e.position),a=e.input.charCodeAt(++e.position)):throwError(e,"unexpected end of the stream within a verbatim tag")}else{for(;a!==0&&!is_WS_OR_EOL(a);)a===33&&(o?throwError(e,"tag suffix cannot contain exclamation marks"):(t=e.input.slice(n-1,e.position+1),PATTERN_TAG_HANDLE.test(t)||throwError(e,"named tag handle cannot contain such characters"),o=!0,n=e.position+1)),a=e.input.charCodeAt(++e.position);l=e.input.slice(n,e.position),PATTERN_FLOW_INDICATORS.test(l)&&throwError(e,"tag suffix cannot contain flow indicator characters")}return l&&!PATTERN_TAG_URI.test(l)&&throwError(e,"tag name cannot contain such characters: "+l),r?e.tag=l:_hasOwnProperty$1.call(e.tagMap,t)?e.tag=e.tagMap[t]+l:t==="!"?e.tag="!"+l:t==="!!"?e.tag="tag:yaml.org,2002:"+l:throwError(e,'undeclared tag handle "'+t+'"'),!0}function readAnchorProperty(e){var n,r;if(r=e.input.charCodeAt(e.position),r!==38)return!1;for(e.anchor!==null&&throwError(e,"duplication of an anchor property"),r=e.input.charCodeAt(++e.position),n=e.position;r!==0&&!is_WS_OR_EOL(r)&&!is_FLOW_INDICATOR(r);)r=e.input.charCodeAt(++e.position);return e.position===n&&throwError(e,"name of an anchor node must contain at least one character"),e.anchor=e.input.slice(n,e.position),!0}function readAlias(e){var n,r,o;if(o=e.input.charCodeAt(e.position),o!==42)return!1;for(o=e.input.charCodeAt(++e.position),n=e.position;o!==0&&!is_WS_OR_EOL(o)&&!is_FLOW_INDICATOR(o);)o=e.input.charCodeAt(++e.position);return e.position===n&&throwError(e,"name of an alias node must contain at least one character"),r=e.input.slice(n,e.position),_hasOwnProperty$1.call(e.anchorMap,r)||throwError(e,'unidentified alias "'+r+'"'),e.result=e.anchorMap[r],skipSeparationSpace(e,!0,-1),!0}function composeNode(e,n,r,o,t){var l,a,c,u=1,s=!1,d=!1,f,p,h,m,g;if(e.listener!==null&&e.listener("open",e),e.tag=null,e.anchor=null,e.kind=null,e.result=null,l=a=c=CONTEXT_BLOCK_OUT===r||CONTEXT_BLOCK_IN===r,o&&skipSeparationSpace(e,!0,-1)&&(s=!0,e.lineIndent>n?u=1:e.lineIndent===n?u=0:e.lineIndent<n&&(u=-1)),u===1)for(;readTagProperty(e)||readAnchorProperty(e);)skipSeparationSpace(e,!0,-1)?(s=!0,c=l,e.lineIndent>n?u=1:e.lineIndent===n?u=0:e.lineIndent<n&&(u=-1)):c=!1;if(c&&(c=s||t),(u===1||CONTEXT_BLOCK_OUT===r)&&(CONTEXT_FLOW_IN===r||CONTEXT_FLOW_OUT===r?m=n:m=n+1,g=e.position-e.lineStart,u===1?c&&(readBlockSequence(e,g)||readBlockMapping(e,g,m))||readFlowCollection(e,m)?d=!0:(a&&readBlockScalar(e,m)||readSingleQuotedScalar(e,m)||readDoubleQuotedScalar(e,m)?d=!0:readAlias(e)?(d=!0,(e.tag!==null||e.anchor!==null)&&throwError(e,"alias node should not have any properties")):readPlainScalar(e,m,CONTEXT_FLOW_IN===r)&&(d=!0,e.tag===null&&(e.tag="?")),e.anchor!==null&&(e.anchorMap[e.anchor]=e.result)):u===0&&(d=c&&readBlockSequence(e,g))),e.tag!==null&&e.tag!=="!")if(e.tag==="?"){for(e.result!==null&&e.kind!=="scalar"&&throwError(e,'unacceptable node kind for !<?> tag; it should be "scalar", not "'+e.kind+'"'),f=0,p=e.implicitTypes.length;f<p;f+=1)if(h=e.implicitTypes[f],h.resolve(e.result)){e.result=h.construct(e.result),e.tag=h.tag,e.anchor!==null&&(e.anchorMap[e.anchor]=e.result);break}}else _hasOwnProperty$1.call(e.typeMap[e.kind||"fallback"],e.tag)?(h=e.typeMap[e.kind||"fallback"][e.tag],e.result!==null&&h.kind!==e.kind&&throwError(e,"unacceptable node kind for !<"+e.tag+'> tag; it should be "'+h.kind+'", not "'+e.kind+'"'),h.resolve(e.result)?(e.result=h.construct(e.result),e.anchor!==null&&(e.anchorMap[e.anchor]=e.result)):throwError(e,"cannot resolve a node with !<"+e.tag+"> explicit tag")):throwError(e,"unknown tag !<"+e.tag+">");return e.listener!==null&&e.listener("close",e),e.tag!==null||e.anchor!==null||d}function readDocument(e){var n=e.position,r,o,t,l=!1,a;for(e.version=null,e.checkLineBreaks=e.legacy,e.tagMap={},e.anchorMap={};(a=e.input.charCodeAt(e.position))!==0&&(skipSeparationSpace(e,!0,-1),a=e.input.charCodeAt(e.position),!(e.lineIndent>0||a!==37));){for(l=!0,a=e.input.charCodeAt(++e.position),r=e.position;a!==0&&!is_WS_OR_EOL(a);)a=e.input.charCodeAt(++e.position);for(o=e.input.slice(r,e.position),t=[],o.length<1&&throwError(e,"directive name must not be less than one character in length");a!==0;){for(;is_WHITE_SPACE(a);)a=e.input.charCodeAt(++e.position);if(a===35){do a=e.input.charCodeAt(++e.position);while(a!==0&&!is_EOL(a));break}if(is_EOL(a))break;for(r=e.position;a!==0&&!is_WS_OR_EOL(a);)a=e.input.charCodeAt(++e.position);t.push(e.input.slice(r,e.position))}a!==0&&readLineBreak(e),_hasOwnProperty$1.call(directiveHandlers,o)?directiveHandlers[o](e,o,t):throwWarning(e,'unknown document directive "'+o+'"')}if(skipSeparationSpace(e,!0,-1),e.lineIndent===0&&e.input.charCodeAt(e.position)===45&&e.input.charCodeAt(e.position+1)===45&&e.input.charCodeAt(e.position+2)===45?(e.position+=3,skipSeparationSpace(e,!0,-1)):l&&throwError(e,"directives end mark is expected"),composeNode(e,e.lineIndent-1,CONTEXT_BLOCK_OUT,!1,!0),skipSeparationSpace(e,!0,-1),e.checkLineBreaks&&PATTERN_NON_ASCII_LINE_BREAKS.test(e.input.slice(n,e.position))&&throwWarning(e,"non-ASCII line breaks are interpreted as content"),e.documents.push(e.result),e.position===e.lineStart&&testDocumentSeparator(e)){e.input.charCodeAt(e.position)===46&&(e.position+=3,skipSeparationSpace(e,!0,-1));return}if(e.position<e.length-1)throwError(e,"end of the stream or a document separator is expected");else return}function loadDocuments(e,n){e=String(e),n=n||{},e.length!==0&&(e.charCodeAt(e.length-1)!==10&&e.charCodeAt(e.length-1)!==13&&(e+=`
`),e.charCodeAt(0)===65279&&(e=e.slice(1)));var r=new State$1(e,n),o=e.indexOf("\0");for(o!==-1&&(r.position=o,throwError(r,"null byte is not allowed in input")),r.input+="\0";r.input.charCodeAt(r.position)===32;)r.lineIndent+=1,r.position+=1;for(;r.position<r.length-1;)readDocument(r);return r.documents}function loadAll(e,n,r){n!==null&&typeof n=="object"&&typeof r>"u"&&(r=n,n=null);var o=loadDocuments(e,r);if(typeof n!="function")return o;for(var t=0,l=o.length;t<l;t+=1)n(o[t])}function load(e,n){var r=loadDocuments(e,n);if(r.length!==0){if(r.length===1)return r[0];throw new YAMLException$1("expected a single document in the stream, but found more")}}function safeLoadAll(e,n,r){return typeof n=="object"&&n!==null&&typeof r>"u"&&(r=n,n=null),loadAll(e,n,common$1.extend({schema:DEFAULT_SAFE_SCHEMA$1},r))}function safeLoad(e,n){return load(e,common$1.extend({schema:DEFAULT_SAFE_SCHEMA$1},n))}loader$1.loadAll=loadAll;loader$1.load=load;loader$1.safeLoadAll=safeLoadAll;loader$1.safeLoad=safeLoad;var dumper$1={},common=common$6,YAMLException=exception,DEFAULT_FULL_SCHEMA=default_full,DEFAULT_SAFE_SCHEMA=default_safe,_toString=Object.prototype.toString,_hasOwnProperty=Object.prototype.hasOwnProperty,CHAR_TAB=9,CHAR_LINE_FEED=10,CHAR_CARRIAGE_RETURN=13,CHAR_SPACE=32,CHAR_EXCLAMATION=33,CHAR_DOUBLE_QUOTE=34,CHAR_SHARP=35,CHAR_PERCENT=37,CHAR_AMPERSAND=38,CHAR_SINGLE_QUOTE=39,CHAR_ASTERISK=42,CHAR_COMMA=44,CHAR_MINUS=45,CHAR_COLON=58,CHAR_EQUALS=61,CHAR_GREATER_THAN=62,CHAR_QUESTION=63,CHAR_COMMERCIAL_AT=64,CHAR_LEFT_SQUARE_BRACKET=91,CHAR_RIGHT_SQUARE_BRACKET=93,CHAR_GRAVE_ACCENT=96,CHAR_LEFT_CURLY_BRACKET=123,CHAR_VERTICAL_LINE=124,CHAR_RIGHT_CURLY_BRACKET=125,ESCAPE_SEQUENCES={};ESCAPE_SEQUENCES[0]="\\0";ESCAPE_SEQUENCES[7]="\\a";ESCAPE_SEQUENCES[8]="\\b";ESCAPE_SEQUENCES[9]="\\t";ESCAPE_SEQUENCES[10]="\\n";ESCAPE_SEQUENCES[11]="\\v";ESCAPE_SEQUENCES[12]="\\f";ESCAPE_SEQUENCES[13]="\\r";ESCAPE_SEQUENCES[27]="\\e";ESCAPE_SEQUENCES[34]='\\"';ESCAPE_SEQUENCES[92]="\\\\";ESCAPE_SEQUENCES[133]="\\N";ESCAPE_SEQUENCES[160]="\\_";ESCAPE_SEQUENCES[8232]="\\L";ESCAPE_SEQUENCES[8233]="\\P";var DEPRECATED_BOOLEANS_SYNTAX=["y","Y","yes","Yes","YES","on","On","ON","n","N","no","No","NO","off","Off","OFF"];function compileStyleMap(e,n){var r,o,t,l,a,c,u;if(n===null)return{};for(r={},o=Object.keys(n),t=0,l=o.length;t<l;t+=1)a=o[t],c=String(n[a]),a.slice(0,2)==="!!"&&(a="tag:yaml.org,2002:"+a.slice(2)),u=e.compiledTypeMap.fallback[a],u&&_hasOwnProperty.call(u.styleAliases,c)&&(c=u.styleAliases[c]),r[a]=c;return r}function encodeHex(e){var n,r,o;if(n=e.toString(16).toUpperCase(),e<=255)r="x",o=2;else if(e<=65535)r="u",o=4;else if(e<=4294967295)r="U",o=8;else throw new YAMLException("code point within a string may not be greater than 0xFFFFFFFF");return"\\"+r+common.repeat("0",o-n.length)+n}function State(e){this.schema=e.schema||DEFAULT_FULL_SCHEMA,this.indent=Math.max(1,e.indent||2),this.noArrayIndent=e.noArrayIndent||!1,this.skipInvalid=e.skipInvalid||!1,this.flowLevel=common.isNothing(e.flowLevel)?-1:e.flowLevel,this.styleMap=compileStyleMap(this.schema,e.styles||null),this.sortKeys=e.sortKeys||!1,this.lineWidth=e.lineWidth||80,this.noRefs=e.noRefs||!1,this.noCompatMode=e.noCompatMode||!1,this.condenseFlow=e.condenseFlow||!1,this.implicitTypes=this.schema.compiledImplicit,this.explicitTypes=this.schema.compiledExplicit,this.tag=null,this.result="",this.duplicates=[],this.usedDuplicates=null}function indentString(e,n){for(var r=common.repeat(" ",n),o=0,t=-1,l="",a,c=e.length;o<c;)t=e.indexOf(`
`,o),t===-1?(a=e.slice(o),o=c):(a=e.slice(o,t+1),o=t+1),a.length&&a!==`
`&&(l+=r),l+=a;return l}function generateNextLine(e,n){return`
`+common.repeat(" ",e.indent*n)}function testImplicitResolving(e,n){var r,o,t;for(r=0,o=e.implicitTypes.length;r<o;r+=1)if(t=e.implicitTypes[r],t.resolve(n))return!0;return!1}function isWhitespace(e){return e===CHAR_SPACE||e===CHAR_TAB}function isPrintable(e){return 32<=e&&e<=126||161<=e&&e<=55295&&e!==8232&&e!==8233||57344<=e&&e<=65533&&e!==65279||65536<=e&&e<=1114111}function isNsChar(e){return isPrintable(e)&&!isWhitespace(e)&&e!==65279&&e!==CHAR_CARRIAGE_RETURN&&e!==CHAR_LINE_FEED}function isPlainSafe(e,n){return isPrintable(e)&&e!==65279&&e!==CHAR_COMMA&&e!==CHAR_LEFT_SQUARE_BRACKET&&e!==CHAR_RIGHT_SQUARE_BRACKET&&e!==CHAR_LEFT_CURLY_BRACKET&&e!==CHAR_RIGHT_CURLY_BRACKET&&e!==CHAR_COLON&&(e!==CHAR_SHARP||n&&isNsChar(n))}function isPlainSafeFirst(e){return isPrintable(e)&&e!==65279&&!isWhitespace(e)&&e!==CHAR_MINUS&&e!==CHAR_QUESTION&&e!==CHAR_COLON&&e!==CHAR_COMMA&&e!==CHAR_LEFT_SQUARE_BRACKET&&e!==CHAR_RIGHT_SQUARE_BRACKET&&e!==CHAR_LEFT_CURLY_BRACKET&&e!==CHAR_RIGHT_CURLY_BRACKET&&e!==CHAR_SHARP&&e!==CHAR_AMPERSAND&&e!==CHAR_ASTERISK&&e!==CHAR_EXCLAMATION&&e!==CHAR_VERTICAL_LINE&&e!==CHAR_EQUALS&&e!==CHAR_GREATER_THAN&&e!==CHAR_SINGLE_QUOTE&&e!==CHAR_DOUBLE_QUOTE&&e!==CHAR_PERCENT&&e!==CHAR_COMMERCIAL_AT&&e!==CHAR_GRAVE_ACCENT}function needIndentIndicator(e){var n=/^\n* /;return n.test(e)}var STYLE_PLAIN=1,STYLE_SINGLE=2,STYLE_LITERAL=3,STYLE_FOLDED=4,STYLE_DOUBLE=5;function chooseScalarStyle(e,n,r,o,t){var l,a,c,u=!1,s=!1,d=o!==-1,f=-1,p=isPlainSafeFirst(e.charCodeAt(0))&&!isWhitespace(e.charCodeAt(e.length-1));if(n)for(l=0;l<e.length;l++){if(a=e.charCodeAt(l),!isPrintable(a))return STYLE_DOUBLE;c=l>0?e.charCodeAt(l-1):null,p=p&&isPlainSafe(a,c)}else{for(l=0;l<e.length;l++){if(a=e.charCodeAt(l),a===CHAR_LINE_FEED)u=!0,d&&(s=s||l-f-1>o&&e[f+1]!==" ",f=l);else if(!isPrintable(a))return STYLE_DOUBLE;c=l>0?e.charCodeAt(l-1):null,p=p&&isPlainSafe(a,c)}s=s||d&&l-f-1>o&&e[f+1]!==" "}return!u&&!s?p&&!t(e)?STYLE_PLAIN:STYLE_SINGLE:r>9&&needIndentIndicator(e)?STYLE_DOUBLE:s?STYLE_FOLDED:STYLE_LITERAL}function writeScalar(e,n,r,o){e.dump=function(){if(n.length===0)return"''";if(!e.noCompatMode&&DEPRECATED_BOOLEANS_SYNTAX.indexOf(n)!==-1)return"'"+n+"'";var t=e.indent*Math.max(1,r),l=e.lineWidth===-1?-1:Math.max(Math.min(e.lineWidth,40),e.lineWidth-t),a=o||e.flowLevel>-1&&r>=e.flowLevel;function c(u){return testImplicitResolving(e,u)}switch(chooseScalarStyle(n,a,e.indent,l,c)){case STYLE_PLAIN:return n;case STYLE_SINGLE:return"'"+n.replace(/'/g,"''")+"'";case STYLE_LITERAL:return"|"+blockHeader(n,e.indent)+dropEndingNewline(indentString(n,t));case STYLE_FOLDED:return">"+blockHeader(n,e.indent)+dropEndingNewline(indentString(foldString(n,l),t));case STYLE_DOUBLE:return'"'+escapeString(n)+'"';default:throw new YAMLException("impossible error: invalid scalar style")}}()}function blockHeader(e,n){var r=needIndentIndicator(e)?String(n):"",o=e[e.length-1]===`
`,t=o&&(e[e.length-2]===`
`||e===`
`),l=t?"+":o?"":"-";return r+l+`
`}function dropEndingNewline(e){return e[e.length-1]===`
`?e.slice(0,-1):e}function foldString(e,n){for(var r=/(\n+)([^\n]*)/g,o=function(){var s=e.indexOf(`
`);return s=s!==-1?s:e.length,r.lastIndex=s,foldLine(e.slice(0,s),n)}(),t=e[0]===`
`||e[0]===" ",l,a;a=r.exec(e);){var c=a[1],u=a[2];l=u[0]===" ",o+=c+(!t&&!l&&u!==""?`
`:"")+foldLine(u,n),t=l}return o}function foldLine(e,n){if(e===""||e[0]===" ")return e;for(var r=/ [^ ]/g,o,t=0,l,a=0,c=0,u="";o=r.exec(e);)c=o.index,c-t>n&&(l=a>t?a:c,u+=`
`+e.slice(t,l),t=l+1),a=c;return u+=`
`,e.length-t>n&&a>t?u+=e.slice(t,a)+`
`+e.slice(a+1):u+=e.slice(t),u.slice(1)}function escapeString(e){for(var n="",r,o,t,l=0;l<e.length;l++){if(r=e.charCodeAt(l),r>=55296&&r<=56319&&(o=e.charCodeAt(l+1),o>=56320&&o<=57343)){n+=encodeHex((r-55296)*1024+o-56320+65536),l++;continue}t=ESCAPE_SEQUENCES[r],n+=!t&&isPrintable(r)?e[l]:t||encodeHex(r)}return n}function writeFlowSequence(e,n,r){var o="",t=e.tag,l,a;for(l=0,a=r.length;l<a;l+=1)writeNode(e,n,r[l],!1,!1)&&(l!==0&&(o+=","+(e.condenseFlow?"":" ")),o+=e.dump);e.tag=t,e.dump="["+o+"]"}function writeBlockSequence(e,n,r,o){var t="",l=e.tag,a,c;for(a=0,c=r.length;a<c;a+=1)writeNode(e,n+1,r[a],!0,!0)&&((!o||a!==0)&&(t+=generateNextLine(e,n)),e.dump&&CHAR_LINE_FEED===e.dump.charCodeAt(0)?t+="-":t+="- ",t+=e.dump);e.tag=l,e.dump=t||"[]"}function writeFlowMapping(e,n,r){var o="",t=e.tag,l=Object.keys(r),a,c,u,s,d;for(a=0,c=l.length;a<c;a+=1)d="",a!==0&&(d+=", "),e.condenseFlow&&(d+='"'),u=l[a],s=r[u],writeNode(e,n,u,!1,!1)&&(e.dump.length>1024&&(d+="? "),d+=e.dump+(e.condenseFlow?'"':"")+":"+(e.condenseFlow?"":" "),writeNode(e,n,s,!1,!1)&&(d+=e.dump,o+=d));e.tag=t,e.dump="{"+o+"}"}function writeBlockMapping(e,n,r,o){var t="",l=e.tag,a=Object.keys(r),c,u,s,d,f,p;if(e.sortKeys===!0)a.sort();else if(typeof e.sortKeys=="function")a.sort(e.sortKeys);else if(e.sortKeys)throw new YAMLException("sortKeys must be a boolean or a function");for(c=0,u=a.length;c<u;c+=1)p="",(!o||c!==0)&&(p+=generateNextLine(e,n)),s=a[c],d=r[s],writeNode(e,n+1,s,!0,!0,!0)&&(f=e.tag!==null&&e.tag!=="?"||e.dump&&e.dump.length>1024,f&&(e.dump&&CHAR_LINE_FEED===e.dump.charCodeAt(0)?p+="?":p+="? "),p+=e.dump,f&&(p+=generateNextLine(e,n)),writeNode(e,n+1,d,!0,f)&&(e.dump&&CHAR_LINE_FEED===e.dump.charCodeAt(0)?p+=":":p+=": ",p+=e.dump,t+=p));e.tag=l,e.dump=t||"{}"}function detectType(e,n,r){var o,t,l,a,c,u;for(t=r?e.explicitTypes:e.implicitTypes,l=0,a=t.length;l<a;l+=1)if(c=t[l],(c.instanceOf||c.predicate)&&(!c.instanceOf||typeof n=="object"&&n instanceof c.instanceOf)&&(!c.predicate||c.predicate(n))){if(e.tag=r?c.tag:"?",c.represent){if(u=e.styleMap[c.tag]||c.defaultStyle,_toString.call(c.represent)==="[object Function]")o=c.represent(n,u);else if(_hasOwnProperty.call(c.represent,u))o=c.represent[u](n,u);else throw new YAMLException("!<"+c.tag+'> tag resolver accepts not "'+u+'" style');e.dump=o}return!0}return!1}function writeNode(e,n,r,o,t,l){e.tag=null,e.dump=r,detectType(e,r,!1)||detectType(e,r,!0);var a=_toString.call(e.dump);o&&(o=e.flowLevel<0||e.flowLevel>n);var c=a==="[object Object]"||a==="[object Array]",u,s;if(c&&(u=e.duplicates.indexOf(r),s=u!==-1),(e.tag!==null&&e.tag!=="?"||s||e.indent!==2&&n>0)&&(t=!1),s&&e.usedDuplicates[u])e.dump="*ref_"+u;else{if(c&&s&&!e.usedDuplicates[u]&&(e.usedDuplicates[u]=!0),a==="[object Object]")o&&Object.keys(e.dump).length!==0?(writeBlockMapping(e,n,e.dump,t),s&&(e.dump="&ref_"+u+e.dump)):(writeFlowMapping(e,n,e.dump),s&&(e.dump="&ref_"+u+" "+e.dump));else if(a==="[object Array]"){var d=e.noArrayIndent&&n>0?n-1:n;o&&e.dump.length!==0?(writeBlockSequence(e,d,e.dump,t),s&&(e.dump="&ref_"+u+e.dump)):(writeFlowSequence(e,d,e.dump),s&&(e.dump="&ref_"+u+" "+e.dump))}else if(a==="[object String]")e.tag!=="?"&&writeScalar(e,e.dump,n,l);else{if(e.skipInvalid)return!1;throw new YAMLException("unacceptable kind of an object to dump "+a)}e.tag!==null&&e.tag!=="?"&&(e.dump="!<"+e.tag+"> "+e.dump)}return!0}function getDuplicateReferences(e,n){var r=[],o=[],t,l;for(inspectNode(e,r,o),t=0,l=o.length;t<l;t+=1)n.duplicates.push(r[o[t]]);n.usedDuplicates=new Array(l)}function inspectNode(e,n,r){var o,t,l;if(e!==null&&typeof e=="object")if(t=n.indexOf(e),t!==-1)r.indexOf(t)===-1&&r.push(t);else if(n.push(e),Array.isArray(e))for(t=0,l=e.length;t<l;t+=1)inspectNode(e[t],n,r);else for(o=Object.keys(e),t=0,l=o.length;t<l;t+=1)inspectNode(e[o[t]],n,r)}function dump(e,n){n=n||{};var r=new State(n);return r.noRefs||getDuplicateReferences(e,r),writeNode(r,0,e,!0,!0)?r.dump+`
`:""}function safeDump(e,n){return dump(e,common.extend({schema:DEFAULT_SAFE_SCHEMA},n))}dumper$1.dump=dump;dumper$1.safeDump=safeDump;var loader=loader$1,dumper=dumper$1;function deprecated(e){return function(){throw new Error("Function "+e+" is deprecated and cannot be used.")}}jsYaml$1.Type=type;jsYaml$1.Schema=schema;jsYaml$1.FAILSAFE_SCHEMA=failsafe;jsYaml$1.JSON_SCHEMA=json;jsYaml$1.CORE_SCHEMA=core;jsYaml$1.DEFAULT_SAFE_SCHEMA=default_safe;jsYaml$1.DEFAULT_FULL_SCHEMA=default_full;jsYaml$1.load=loader.load;jsYaml$1.loadAll=loader.loadAll;jsYaml$1.safeLoad=loader.safeLoad;jsYaml$1.safeLoadAll=loader.safeLoadAll;jsYaml$1.dump=dumper.dump;jsYaml$1.safeDump=dumper.safeDump;jsYaml$1.YAMLException=exception;jsYaml$1.MINIMAL_SCHEMA=failsafe;jsYaml$1.SAFE_SCHEMA=default_safe;jsYaml$1.DEFAULT_SCHEMA=default_full;jsYaml$1.scan=deprecated("scan");jsYaml$1.parse=deprecated("parse");jsYaml$1.compose=deprecated("compose");jsYaml$1.addConstructor=deprecated("addConstructor");var yaml=jsYaml$1,jsYaml=yaml;(function(module,exports){const yaml=jsYaml,engines=module.exports;engines.yaml={parse:yaml.safeLoad.bind(yaml),stringify:yaml.safeDump.bind(yaml)},engines.json={parse:JSON.parse.bind(JSON),stringify:function(e,n){const r=Object.assign({replacer:null,space:2},n);return JSON.stringify(e,r.replacer,r.space)}},engines.javascript={parse:function parse(str,options,wrap){try{return wrap!==!1&&(str=`(function() {
return `+str.trim()+`;
}());`),eval(str)||{}}catch(e){if(wrap!==!1&&/(unexpected|identifier)/i.test(e.message))return parse(str,options,!1);throw new SyntaxError(e)}},stringify:function(){throw new Error("stringifying JavaScript is not supported")}}})(engines$2);var enginesExports=engines$2.exports,utils$3={};/*!
 * strip-bom-string <https://github.com/jonschlinkert/strip-bom-string>
 *
 * Copyright (c) 2015, 2017, Jon Schlinkert.
 * Released under the MIT License.
 */var stripBomString=function(e){return typeof e=="string"&&e.charAt(0)==="\uFEFF"?e.slice(1):e};(function(e){const n=stripBomString,r=kindOf;e.define=function(o,t,l){Reflect.defineProperty(o,t,{enumerable:!1,configurable:!0,writable:!0,value:l})},e.isBuffer=function(o){return r(o)==="buffer"},e.isObject=function(o){return r(o)==="object"},e.toBuffer=function(o){return typeof o=="string"?Buffer.from(o):o},e.toString=function(o){if(e.isBuffer(o))return n(String(o));if(typeof o!="string")throw new TypeError("expected input to be a string or buffer");return n(o)},e.arrayify=function(o){return o?Array.isArray(o)?o:[o]:[]},e.startsWith=function(o,t,l){return typeof l!="number"&&(l=t.length),o.slice(0,l)===t}})(utils$3);const engines$1=enginesExports,utils$2=utils$3;var defaults$4=function(e){const n=Object.assign({},e);return n.delimiters=utils$2.arrayify(n.delims||n.delimiters||"---"),n.delimiters.length===1&&n.delimiters.push(n.delimiters[0]),n.language=(n.language||n.lang||"yaml").toLowerCase(),n.engines=Object.assign({},engines$1,n.parsers,n.engines),n},engine=function(e,n){let r=n.engines[e]||n.engines[aliase(e)];if(typeof r>"u")throw new Error('gray-matter engine "'+e+'" is not registered');return typeof r=="function"&&(r={parse:r}),r};function aliase(e){switch(e.toLowerCase()){case"js":case"javascript":return"javascript";case"coffee":case"coffeescript":case"cson":return"coffee";case"yaml":case"yml":return"yaml";default:return e}}const typeOf$1=kindOf,getEngine$1=engine,defaults$3=defaults$4;var stringify$2=function(e,n,r){if(n==null&&r==null)switch(typeOf$1(e)){case"object":n=e.data,r={};break;case"string":return e;default:throw new TypeError("expected file to be a string or object")}const o=e.content,t=defaults$3(r);if(n==null){if(!t.data)return e;n=t.data}const l=e.language||t.language,a=getEngine$1(l,t);if(typeof a.stringify!="function")throw new TypeError('expected "'+l+'.stringify" to be a function');n=Object.assign({},e.data,n);const c=t.delimiters[0],u=t.delimiters[1],s=a.stringify(n,r).trim();let d="";return s!=="{}"&&(d=newline(c)+newline(s)+newline(u)),typeof e.excerpt=="string"&&e.excerpt!==""&&o.indexOf(e.excerpt.trim())===-1&&(d+=newline(e.excerpt)+newline(u)),d+newline(o)};function newline(e){return e.slice(-1)!==`
`?e+`
`:e}const defaults$2=defaults$4;var excerpt$1=function(e,n){const r=defaults$2(n);if(e.data==null&&(e.data={}),typeof r.excerpt=="function")return r.excerpt(e,r);const o=e.data.excerpt_separator||r.excerpt_separator;if(o==null&&(r.excerpt===!1||r.excerpt==null))return e;const t=typeof r.excerpt=="string"?r.excerpt:o||r.delimiters[0],l=e.content.indexOf(t);return l!==-1&&(e.excerpt=e.content.slice(0,l)),e};const typeOf=kindOf,stringify$1=stringify$2,utils$1=utils$3;var toFile$1=function(e){return typeOf(e)!=="object"&&(e={content:e}),typeOf(e.data)!=="object"&&(e.data={}),e.contents&&e.content==null&&(e.content=e.contents),utils$1.define(e,"orig",utils$1.toBuffer(e.content)),utils$1.define(e,"language",e.language||""),utils$1.define(e,"matter",e.matter||""),utils$1.define(e,"stringify",function(n,r){return r&&r.language&&(e.language=r.language),stringify$1(e,n,r)}),e.content=utils$1.toString(e.content),e.isEmpty=!1,e.excerpt="",e};const getEngine=engine,defaults$1=defaults$4;var parse$1=function(e,n,r){const o=defaults$1(r),t=getEngine(e,o);if(typeof t.parse!="function")throw new TypeError('expected "'+e+'.parse" to be a function');return t.parse(n,o)};const fs=require$$0,sections=sectionMatter,defaults=defaults$4,stringify=stringify$2,excerpt=excerpt$1,engines=enginesExports,toFile=toFile$1,parse=parse$1,utils=utils$3;function matter(e,n){if(e==="")return{data:{},content:e,excerpt:"",orig:e};let r=toFile(e);const o=matter.cache[r.content];if(!n){if(o)return r=Object.assign({},o),r.orig=o.orig,r;matter.cache[r.content]=r}return parseMatter(r,n)}function parseMatter(e,n){const r=defaults(n),o=r.delimiters[0],t=`
`+r.delimiters[1];let l=e.content;r.language&&(e.language=r.language);const a=o.length;if(!utils.startsWith(l,o,a))return excerpt(e,r),e;if(l.charAt(a)===o.slice(-1))return e;l=l.slice(a);const c=l.length,u=matter.language(l,r);u.name&&(e.language=u.name,l=l.slice(u.raw.length));let s=l.indexOf(t);return s===-1&&(s=c),e.matter=l.slice(0,s),e.matter.replace(/^\s*#[^\n]+/gm,"").trim()===""?(e.isEmpty=!0,e.empty=e.content,e.data={}):e.data=parse(e.language,e.matter,r),s===c?e.content="":(e.content=l.slice(s+t.length),e.content[0]==="\r"&&(e.content=e.content.slice(1)),e.content[0]===`
`&&(e.content=e.content.slice(1))),excerpt(e,r),(r.sections===!0||typeof r.section=="function")&&sections(e,r.section),e}matter.engines=engines;matter.stringify=function(e,n,r){return typeof e=="string"&&(e=matter(e,r)),stringify(e,n,r)};matter.read=function(e,n){const r=fs.readFileSync(e,"utf8"),o=matter(r,n);return o.path=e,o};matter.test=function(e,n){return utils.startsWith(e,defaults(n).delimiters[0])};matter.language=function(e,n){const o=defaults(n).delimiters[0];matter.test(e)&&(e=e.slice(o.length));const t=e.slice(0,e.search(/\r?\n/));return{raw:t,name:t?t.trim():""}};matter.cache={};matter.clearCache=function(){matter.cache={}};var grayMatter=matter;const matter$1=getDefaultExportFromCjs(grayMatter),regexWiki=/\[\[([^\]]+)\]\]/,regexParenthesis=/\((.*?)\)/,regexWikiGlobal=/\[\[([^\]]*)\]\]/g,regexMdGlobal=/\[([^\]]*)\]\(([^\(]*)\)/g,getImageFromLine=e=>{var n,r;if(e.match(regexMdGlobal)){const o=(n=e.match(regexParenthesis))==null?void 0:n[1];if(o)return o.toLowerCase().startsWith("http")?{type:"external",link:o}:{type:"wiki",link:o}}else if(e.match(regexWikiGlobal)){const o=(r=e.match(regexWiki))==null?void 0:r[1];if(o)return{type:"wiki",link:o}}return null},getImages=e=>e.split(`
`).filter(o=>o.startsWith("!")).map(o=>getImageFromLine(o)).filter(o=>o!==null);function resolveLocalImages(e,n,r){return e.map(o=>{if(o.type==="wiki"){const t=r.app.metadataCache.getFirstLinkpathDest(o.link,n.sourcePath);if(t)return{type:"resolved",link:r.app.vault.adapter.getResourcePath(t.path)}}return o})}const layoutImages={a:2,b:2,c:2,d:3,e:3,f:4,g:4,h:3,i:4};function addLegacyMarkdownProcessors(e){for(const n in layoutImages)e.registerMarkdownCodeBlockProcessor(`image-layout-${n}`,(r,o,t)=>{renderLegacyLayoutComponent(r,o,t,e,n)})}function renderLegacyLayoutComponent(e,n,r,o,t){const l=matter$1(e),a=getImages(l.content),c=resolveLocalImages(a,r,o);new LegacyImageLayout({target:n,props:{caption:l.data.caption??"",descriptions:l.data.descriptions,layout:t,requiredImages:layoutImages[t],imageUrls:c.map(u=>u.link)}})}const LegacyMasonryLayout_svelte_svelte_type_style_lang="";function get_each_context(e,n,r){const o=e.slice();return o[2]=n[r],o[4]=r,o}function get_each_context_1(e,n,r){const o=e.slice();return o[5]=n[r],o[7]=r,o}function create_if_block(e){let n,r,o,t;return{c(){n=element("img"),attr(n,"class",r=null_to_empty(`image-layouts-masonry-image-${e[7]}`)+" svelte-1ewls1i"),src_url_equal(n.src,o=e[5])||attr(n,"src",o),attr(n,"alt",t=`Image ${e[7]+1}`)},m(l,a){insert(l,n,a)},p(l,a){a&2&&r!==(r=null_to_empty(`image-layouts-masonry-image-${l[7]}`)+" svelte-1ewls1i")&&attr(n,"class",r),a&2&&!src_url_equal(n.src,o=l[5])&&attr(n,"src",o),a&2&&t!==(t=`Image ${l[7]+1}`)&&attr(n,"alt",t)},d(l){l&&detach(n)}}}function create_each_block_1(e,n){let r,o,t=n[7]%n[0]===n[4]&&create_if_block(n);return{key:e,first:null,c(){r=empty(),t&&t.c(),o=empty(),this.first=r},m(l,a){insert(l,r,a),t&&t.m(l,a),insert(l,o,a)},p(l,a){n=l,n[7]%n[0]===n[4]?t?t.p(n,a):(t=create_if_block(n),t.c(),t.m(o.parentNode,o)):t&&(t.d(1),t=null)},d(l){l&&(detach(r),detach(o)),t&&t.d(l)}}}function create_each_block(e){let n,r=[],o=new Map,t,l=ensure_array_like(e[1]);const a=c=>c[5];for(let c=0;c<l.length;c+=1){let u=get_each_context_1(e,l,c),s=a(u);o.set(s,r[c]=create_each_block_1(s,u))}return{c(){n=element("div");for(let c=0;c<r.length;c+=1)r[c].c();t=space(),attr(n,"class",null_to_empty("image-layouts-masonry-column")+" svelte-1ewls1i")},m(c,u){insert(c,n,u);for(let s=0;s<r.length;s+=1)r[s]&&r[s].m(n,null);append(n,t)},p(c,u){u&3&&(l=ensure_array_like(c[1]),r=update_keyed_each(r,u,a,1,c,l,o,n,destroy_block,create_each_block_1,t,get_each_context_1))},d(c){c&&detach(n);for(let u=0;u<r.length;u+=1)r[u].d()}}}function create_fragment(e){let n,r,o=ensure_array_like(Array(e[0])),t=[];for(let l=0;l<o.length;l+=1)t[l]=create_each_block(get_each_context(e,o,l));return{c(){n=element("div");for(let l=0;l<t.length;l+=1)t[l].c();attr(n,"class",r=null_to_empty(`image-layouts-masonry-grid-${e[0]}`)+" svelte-1ewls1i")},m(l,a){insert(l,n,a);for(let c=0;c<t.length;c+=1)t[c]&&t[c].m(n,null)},p(l,[a]){if(a&3){o=ensure_array_like(Array(l[0]));let c;for(c=0;c<o.length;c+=1){const u=get_each_context(l,o,c);t[c]?t[c].p(u,a):(t[c]=create_each_block(u),t[c].c(),t[c].m(n,null))}for(;c<t.length;c+=1)t[c].d(1);t.length=o.length}a&1&&r!==(r=null_to_empty(`image-layouts-masonry-grid-${l[0]}`)+" svelte-1ewls1i")&&attr(n,"class",r)},i:noop,o:noop,d(l){l&&detach(n),destroy_each(t,l)}}}function instance(e,n,r){let{columns:o}=n,{imageUrls:t=[]}=n;return e.$$set=l=>{"columns"in l&&r(0,o=l.columns),"imageUrls"in l&&r(1,t=l.imageUrls)},[o,t]}class LegacyMasonryLayout extends SvelteComponent{constructor(n){super(),init(this,n,instance,create_fragment,safe_not_equal,{columns:0,imageUrls:1})}}function addLegacyMasonryMarkdownProcessors(e){for(let n=2;n<=6;n++)e.registerMarkdownCodeBlockProcessor(`image-layout-masonry-${n}`,(r,o,t)=>{renderLegacyMasonryLayoutComponent(r,o,t,e,n)})}function renderLegacyMasonryLayoutComponent(e,n,r,o,t){const l=getImages(e),a=resolveLocalImages(l,r,o);new LegacyMasonryLayout({target:n,props:{columns:t,imageUrls:a.map(c=>c.link)}})}const DEFAULT_SETTINGS={mySetting:"default"};class ObsidianNoteConnections extends obsidian.Plugin{async loadSettings(){this.settings=Object.assign({},DEFAULT_SETTINGS,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async onload(){await this.loadSettings(),addLegacyMarkdownProcessors(this),addLegacyMasonryMarkdownProcessors(this)}onunload(){console.log("unloading plugin")}}module.exports=ObsidianNoteConnections;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
